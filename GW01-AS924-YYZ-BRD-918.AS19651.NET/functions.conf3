# --- Functions ---
function prefix_is_bogon() {
  if net.type = NET_IP4 then
    if net ~ BOGONS_4 then return true;
  if net.type = NET_IP6 then
    if net ~ BOGONS_6 then return true;
  return false;
}

function as_path_contains_invalid_asn() {
  return bgp_path ~ INVALID_ASNS;
}

function prefix_is_in_global_blacklist() {
  if net.type = NET_IP4 then
    if net ~ GLOBAL_BLACKLIST_4 then return true;
  if net.type = NET_IP6 then
    if net ~ GLOBAL_BLACKLIST_6 then return true;
  return false;
}

function prefix_is_in_global_whitelist() {
  if net.type = NET_IP6 then
    if net ~ GLOBAL_WHITELIST_6 then return true;
  return false;
}

function is_own_prefix() {
  if net.type = NET_IP4 then {
    if net ~ ORIGINATED_PREFIXES_4 then {
      bgp_large_community.add((OUR_AS, 101, 1));
      return true;
    }
  }

  if net.type = NET_IP6 then {
    if net ~ ORIGINATED_PREFIXES_6 then {
      bgp_large_community.add((OUR_AS, 101, 1));
      return true;
    }
  }

  return false;
}

function is_own_internal_prefix() {
  if net.type = NET_IP4 then
    if net ~ OUR_INTERNAL_PREFIXES_4 then return true;
  if net.type = NET_IP6 then
    if net ~ OUR_INTERNAL_PREFIXES_6 then return true;
  return false;
}

function was_learned_from_peer() {
  if (OUR_AS, 101, 2) ~ bgp_large_community then return true;
  return false;
}

function was_learned_from_private_peer() {
  if (OUR_AS, 101, 3) ~ bgp_large_community then return true;
  return false;
}

function was_learned_from_upstream() {
  if (OUR_AS, 101, 4) ~ bgp_large_community then return true;
  return false;
}

function was_learned_from_customer() {
  if (OUR_AS, 101, 5) ~ bgp_large_community then return true;
  return false;
}

function is_prefix_length_valid(int pref_len_min; int pref_len_max) {
  if net.len < pref_len_min then return false;
  if net.len > pref_len_max then return false;
  return true;
}

function should_not_export_to_site() {
  if (OUR_AS, 603, SITE_ID) ~ bgp_large_community then return true;
  return false;
}

function should_not_export_to_region() {
  if (OUR_AS, 603, REGION_ID) ~ bgp_large_community then return true;
  return false;
}

function should_not_export_to_peers() {
  if (OUR_AS, 601, 2) ~ bgp_large_community then return true;
  return false;
}

function should_not_export_to_private_peers() {
  if (OUR_AS, 601, 3) ~ bgp_large_community then return true;
  return false;
}

function should_not_export_to_upstreams() {
  if (OUR_AS, 601, 4) ~ bgp_large_community then return true;
  return false;
}

function should_not_export_to_customers() {
  if (OUR_AS, 601, 5) ~ bgp_large_community then return true;
  return false;
}

function add_peer_community() {
  bgp_large_community.add((OUR_AS, 101, 2));
}

function add_private_peer_community() {
  bgp_large_community.add((OUR_AS, 101, 3));
}

function add_upstream_community() {
  bgp_large_community.add((OUR_AS, 101, 4));
}

function add_customer_community() {
  bgp_large_community.add((OUR_AS, 101, 5));
}

function add_region_community() {
  bgp_large_community.add((OUR_AS, 102, REGION_ID));
}

function add_site_community() {
  bgp_large_community.add((OUR_AS, 103, SITE_ID));
}

function add_global_prepends() {
  if (OUR_AS, 900, 1) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 900, 2) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 900, 3) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
}

function add_as_specific_prepends(int exporting_asn) {
  if (OUR_AS, 991, exporting_asn) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 992, exporting_asn) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
  if (OUR_AS, 993, exporting_asn) ~ bgp_large_community then
    { bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); bgp_path.prepend(OUR_AS); }
}

function handle_as_specific_no_export(int exporting_asn) {
  if (OUR_AS, 600, exporting_asn) ~ bgp_large_community then
    reject "NO_EXPORT community in place for specific AS - NOT ANNOUNCING ", net;
}

function add_rpki_community(string rpki_status) {
  if rpki_status = "valid" then {
    bgp_ext_community.add((unknown 0x4300, 0, 0));
  }
  if rpki_status = "unknown" then {
    bgp_ext_community.add((unknown 0x4300, 0, 1));
  }
  if rpki_status = "invalid" then {
    bgp_ext_community.add((unknown 0x4300, 0, 2));
  }
}

function perform_rpki_validation() {
  if net.type = NET_IP4 then {
    case roa_check(RPKI4) {
      ROA_VALID: add_rpki_community("valid");
      ROA_UNKNOWN: add_rpki_community("unknown");
      ROA_INVALID: add_rpki_community("invalid");
    }
  } else {
    case roa_check(RPKI6) {
      ROA_VALID: add_rpki_community("valid");
      ROA_UNKNOWN: add_rpki_community("unknown");
      ROA_INVALID: add_rpki_community("invalid");
    }
  }
}

function route_is_rpki_invalid() {
  return (unknown 0x4300, 0, 2) ~ bgp_ext_community;
}

function honor_graceful_shutdown() {
  if (19651, 0) ~ bgp_community then {
    bgp_local_pref = 0;
  }
}

# https://tools.ietf.org/html/rfc7454#section-11
function scrub_communities_in() {
  bgp_large_community.delete((OUR_AS, 101, 1));         # Learned from peer
  bgp_large_community.delete((OUR_AS, 101, 2));         # Learned from private peer
  bgp_large_community.delete((OUR_AS, 101, 3));         # Learned from IXP
  bgp_large_community.delete((OUR_AS, 101, 4));         # Learned from transit provider
  bgp_large_community.delete((OUR_AS, 101, 5));         # Learned from customer
  bgp_large_community.delete((OUR_AS, 102, REGION_ID)); # Learned in region
  bgp_large_community.delete((OUR_AS, 103, SITE_ID));   # Learned in site
}

function strip_private_asns() {
  bgp_path.delete([64512..65534]);
  bgp_path.delete([4200000000..4294967294]);
}

# --- Filters (technically functions) ---
function default_import() {
  if bgp_path.len > 32 then
    reject "AS_PATH len [", bgp_path.len ,"] longer than 32 - REJECTING ", net;

  if prefix_is_in_global_blacklist() then
    reject "prefix is in global blacklist - REJECTING ", net;

  if is_own_prefix() then
    reject "prefix is our own - REJECTING ", net;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "prefix is our own and internal - REJECTING ", net;
  }

  if prefix_is_bogon() then
    reject "prefix is bogon - REJECTING ", net;

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  perform_rpki_validation();

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - REJECTING ", net;

  add_region_community();
  add_site_community();
  honor_graceful_shutdown();

  accept;
}

function peer_import() {
  scrub_communities_in();
  add_peer_community();
  default_import();
}

function peer_export() {
  strip_private_asns();
  add_global_prepends();

  if is_own_prefix() then accept;

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - NOT ANNOUNCING ", net;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "prefix is our own and internal - NOT ANNOUNCING ", net;
  }

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  if prefix_is_bogon() then
    reject "prefix is bogon - NOT ANNOUNCING ", net;

  if as_path_contains_invalid_asn() then
    reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;

  if should_not_export_to_site() then
    reject "NO_EXPORT community in place for site - NOT ANNOUNCING ", net;

  if should_not_export_to_region() then
    reject "NO_EXPORT community in place for region - NOT ANNOUNCING ", net;

  if should_not_export_to_peers() then
    reject "NO_EXPORT community in place for peers - NOT ANNOUNCING ", net;

  if prefix_is_in_global_blacklist() then
    reject "prefix is in global blacklist - REJECTING ", net;

  if was_learned_from_customer() then accept;

  reject;
}

function upstream_import() {
  scrub_communities_in();
  add_upstream_community();
  default_import();
}

function upstream_export() {
  strip_private_asns();
  add_global_prepends();

  if is_own_prefix() then accept;

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - NOT ANNOUNCING ", net;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "prefix is our own and internal - NOT ANNOUNCING ", net;
  }

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  if prefix_is_bogon() then
    reject "prefix is bogon - NOT ANNOUNCING ", net;

  if as_path_contains_invalid_asn() then
    reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;

  if should_not_export_to_site() then
    reject "NO_EXPORT community in place for site - NOT ANNOUNCING ", net;

  if should_not_export_to_region() then
    reject "NO_EXPORT community in place for region - NOT ANNOUNCING ", net;

  if should_not_export_to_upstreams() then
    reject "NO_EXPORT community in place for upstreams - NOT ANNOUNCING ", net;

  if prefix_is_in_global_blacklist() then
    reject "prefix is in global blacklist - REJECTING ", net;

  if was_learned_from_customer() then accept;

  reject;
}

function customer_import() {
  scrub_communities_in();
  add_customer_community();
  default_import();
}

function customer_export() {
  strip_private_asns();
  add_global_prepends();

  if is_own_prefix() then accept;

  if route_is_rpki_invalid() then
    reject "RPKI, route is INVALID - NOT ANNOUNCING ", net;

  if is_own_internal_prefix() then {
    if !prefix_is_in_global_whitelist() then
      reject "prefix is our own and internal - NOT ANNOUNCING ", net;
  }

  if net.type = NET_IP4 then
    if !is_prefix_length_valid(8, 24) then
      reject "prefix len [", net.len, "] not in 8-24 - REJECTING ", net;

  if net.type = NET_IP6 then
    if !is_prefix_length_valid(12, 48) then
      reject "prefix len [", net.len, "] not in 12-48 - REJECTING ", net;

  if prefix_is_bogon() then
    reject "prefix is bogon - NOT ANNOUNCING ", net;

  if as_path_contains_invalid_asn() then
    reject "AS_PATH [", bgp_path ,"] contains invalid ASN - REJECTING ", net;

  if should_not_export_to_site() then
    reject "NO_EXPORT community in place for site - NOT ANNOUNCING ", net;

  if should_not_export_to_region() then
    reject "NO_EXPORT community in place for region - NOT ANNOUNCING ", net;

  if should_not_export_to_customers() then
    reject "NO_EXPORT community in place for customers - NOT ANNOUNCING ", net;

  if prefix_is_in_global_blacklist() then
    reject "prefix is in global blacklist - REJECTING ", net;

  if was_learned_from_peer() then accept;
  if was_learned_from_private_peer() then accept;
  if was_learned_from_upstream() then accept;
  if was_learned_from_customer() then accept;

  reject;
}

function core_import() {
  if prefix_is_bogon() then reject;

  if prefix_is_in_global_blacklist() then
    reject "prefix is in global blacklist - REJECTING ", net;

  honor_graceful_shutdown();
  accept;
}

function core_export() {
  if prefix_is_bogon() then reject;

  if prefix_is_in_global_blacklist() then
    reject "prefix is in global blacklist - REJECTING ", net;

  if is_own_prefix() then accept;
  if is_own_internal_prefix() then accept;
  if was_learned_from_peer() then accept;
  if was_learned_from_private_peer() then accept;
  if was_learned_from_upstream() then accept;
  if was_learned_from_customer() then accept;

  reject;
}
